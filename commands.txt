# ------------Porject repository--------------------------------
      https://github.com/LondheShubham153/two-tier-flask-app

# ------------- Kubernetes Setup  -------------------------------
      https://github.com/LondheShubham153/kubestarter/blob/main/kubeadm_installation.md

#---------------episode 2 ---------------------------------------------------
1. create t2.micro instances
2. sudo apt update
3. sudo apt install docker.io
4. docker ps 
5. sudo chown $USER /var/run/docker.sock 
6. docker ps 
7. clone repository 
8. docker build . -t flaskapp
9. docker run -d -p 5000:5000 flaskapp:latest
10. Edit inbound rules 5000 anywhere
11. copy ip and run on browser  ( ipaddress:5000 )
12. kill all the images ( docker kill imageId)
13. docker network create twotier

14. docker run -d -p 5000:5000 --network=twotier -e MYSQL_HOST=mysql -e MYSQL_USER=admin -e MYSQL_PASSWORD=admin -e MYSQL_DB=myDB --name=flaskapp  flaskapp:latest 

15. docker run -d -p 3306:3306 --network=twotier -e MYSQL_DATABASE=myDB -e MYSQL_USER=admin -e MYSQL_PASSWORD=admin -e MYSQL_ROOT_PASSWORD=admin --name=mysql mysql:5.7

16. docker network ls 
17. docker network inspect twotier

18. docker exec -it (mysqlcontainerId) bash 
19. ls > mysql -u root -p > password : admin
20. show databases > use myDB; 
21. CREATE TABLE messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    message TEXT
);

22. select * from messages;

23. docker login  (login docker hub to push flaskapp image to docker hub)
24. docker images
25. docker tag flaskapp:latest imdaquib/flaskapp:latest
26. docker images
27. docker push imdaquib/flaskapp:latest

28. sudo apt install docker-compose
29. docker-compose up -d
30. docker-compose down 


#--------------------------------episode 3   kubernetes Setup ----------------------------------------

1. Create two ec2 instances Master Node and Worker Node  t2.medium

2. Run the following commands on both the master and worker nodes to prepare them for kubeadm.

# using 'sudo su' is not a good practice.
      sudo apt update
      sudo apt-get install -y apt-transport-https ca-certificates curl
      sudo apt install docker.io -y

      sudo systemctl enable --now docker # enable and start in single command.

      # Adding GPG keys.
      curl -fsSL "https://packages.cloud.google.com/apt/doc/apt-key.gpg" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg

      # Add the repository to the sourcelist.
      echo 'deb https://packages.cloud.google.com/apt kubernetes-xenial main' | sudo tee /etc/apt/sources.list.d/kubernetes.list

      sudo apt update 
      sudo apt install kubeadm=1.20.0-00 kubectl=1.20.0-00 kubelet=1.20.0-00 -y

3. Initialize the Kubernetes master node.

      sudo kubeadm init
 (After succesfully running, your Kubernetes control plane will be initialized successfully.)

4. Set up local kubeconfig (both for root user and normal user):

      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config

5. kubectl get nodes

6. Apply Weave network:
      kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

8. Generate a token for worker nodes to join:
      sudo kubeadm token create --print-join-command

10. Expose port 6443 in the Security group inbound rules for the Worker to connect to Master Node

11. kubectl get nodes

12. sudo docker ps

#-------------------Worker Node---------

7. Run the following commands on the worker node.
      sudo kubeadm reset pre-flight checks

9. copy the token from master node and paste in worker node ( add  --v=5   at the end of token)
eg:- ( sudo kubedem join 172.0.0.2:6443 --token 4xasdfadsfa   --v=5)

13. sudo docker ps

# ----------------- Episode 4  Deployment -----------------------------------------------------------
# --------Master Node----------
1. Clone repo from git hub and cd k8s folder
2. kubectl apply -f flask-app-pod.yml
3. kubectl get pods
4. kubectl apply -f flask-app-deployment.yml
5. kubectl get pods
8. kubectl get pods
9. kubectl scale deployment flask-app-deployment --replicas=1    ( it will create only 1 replica )
10. kubectl get pods

11. kubectl apply -f flask-app-svc.yml
12. kubectl get service
14. kubectl get nodes

15. kubectl apply -f mysql-pv.yml
16. kubectl apply -f mysql-pvc.yml 
17. kubectl apply -f mysql-deployment.yml
18. kubectl get pods
19. kubectl apply -f mysql-svc.yml
20. kubectl get svc 
21. run the app 30004 port ( it will show ' Unknown server host 'mysql' ' )
22. copy the cluster ip and paste it to flask-app-deployment.yml   "MySQL_Host" value="10.2.22.10"
23. kubectl apply -f flask-app-deployment.yml 
24. refresh the browser  ( it will show "Table 'mydb.messages' does not exist")

#-------- Worker Node---------
6. sudo docker ps
7. sudo docker kill  cntrId  ( kill one flaskapp container and check in master node if creates new one )
13. Edit inbound rules (Custom TCP, 6443, anywhere), ( Custom TCP, 30004, anywhere)
25. sudo docker exec -it mysqlcntrId bash
26. mysql -u root -p  ( password = admin)
27. show databases; > use mydb; 
28. CREATE TABLE messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    message TEXT
);

29. refresh again the browser 